//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.34209
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEngine;

/// <summary>
/// 临时处理办法：暂时只在BattleScene中使用，
/// </summary>
public class PopUpManager : ICommand
{
	private static PopUpManager _instance;

	public static PopUpManager getInstance()
	{
		if (_instance == null) 
		{
			_instance = new PopUpManager();
		}
		return _instance;
	}

	private Dictionary<string,GameObject> _windowMap;
	private Dictionary<string,GameObject> _popUpMap;
	private Dictionary<string,BaseViewController> _controllerMap;

	private GameObject _containerCanvas;

	public PopUpManager ()
	{
		
	}

	public void init()
	{
		this._windowMap = new Dictionary<string, GameObject> ();
		this._popUpMap = new Dictionary<string, GameObject> ();
		this._controllerMap = new Dictionary<string, BaseViewController> ();
		// 初始化uiRoot
		this._containerCanvas = GameObject.Find ("Canvas");
        this._windowMap.Add(WindowName.BATTLE_SCENE_CANVAS, this._containerCanvas);
        GameObject uiLayer = this._containerCanvas.transform.FindChild("UILayer").gameObject;
        this._windowMap.Add(WindowName.UILAYER, uiLayer);
		//Global.NGUIRoot = this._uiRoot;
		// 消息
		CommandManager.getInstance ().addCommand (CommandConsts.PopUpWindow, this);
		CommandManager.getInstance ().addCommand (CommandConsts.RemoveWindow, this);
		CommandManager.getInstance ().addCommand (CommandConsts.DestroyWindow, this);
	}

	public void registerWindow(string windowName,GameObject window,BaseViewController controller)
	{
		this._windowMap.Add (windowName, window);
		this._controllerMap.Add (windowName, controller);
		window.SetActive (false);
	}

	public void addPopUp(string windowName,string parentName)
	{
		GameObject window = null;
        GameObject parent = null;
		/*if (this._popUpMap.ContainsKey (windowName)) 
		{
			return;
		}*/
		if (this._windowMap.ContainsKey (windowName)) 
		{
			window = this._windowMap [windowName];
            if (this._windowMap.TryGetValue(parentName, out parent))
            {
                window.transform.SetParent(parent.transform);
                window.transform.localPosition = Vector3.zero;
                window.transform.localScale = Vector3.one;
                window.transform.localRotation = Quaternion.identity;
            }
            window.SetActive (true);
            window.transform.SetAsLastSibling();
			this._popUpMap.Add (windowName, window);
		}
	}

	public void removePopUp(string WindowName)
	{
		GameObject window;
		if (this._popUpMap.ContainsKey (WindowName)) 
		{
			window = this._popUpMap[WindowName];
			window.SetActive(false);
			//window.renderer.enabled = false;
			this._popUpMap.Remove(WindowName);
		}
	}

	public void removePopUp(string windowName,bool destroyWindow)
	{
		GameObject window;
		if ( this._popUpMap.TryGetValue (windowName,out window) ) 
		{
			window = this._popUpMap[windowName];
			BaseViewController controller = window.GetComponent<BaseViewController>();
			controller.onClose();
			//GameObject.Destroy(window);
			this._popUpMap.Remove(windowName);
			window.SetActive(false);
		}
	}

	public bool hasPopUp(string windowName)
	{
		return this._popUpMap.ContainsKey (windowName);
	}

	public void recvCommand(int cmdNum,params object[] args)
	{
		string windowName = args[0] as string;
		switch ( cmdNum )
		{
		case CommandConsts.PopUpWindow:
			this.popUpWindow(windowName,args);
			break;
		case CommandConsts.RemoveWindow:
			this.removePopUp(windowName);
			break;
		case CommandConsts.DestroyWindow:
			break;
		}
	}

	private void popUpWindow(string windowName,object[] args)
	{
		if (this._popUpMap.ContainsKey (windowName)) 
		{
			return;
		}
		BaseViewController controller;
		if (this._windowMap.ContainsKey (windowName))
		{
			if ( this._controllerMap.TryGetValue(windowName,out controller) )
			{
				controller.onPopUp(args);
			}
		} 
		else 
		{
			//GameObject prefab = Resources.Load("Prefabs/" + windowName,typeof(GameObject)) as GameObject;
            GameObject window = ResourceManager.getInstance().createNewInstanceByPrefabName(windowName);
			if (window != null )
			{
				//window = GameObject.Instantiate(prefab) as GameObject;
                //window.transform.SetParent(this._containerCanvas.transform);
				//window.transform.parent = this._uiRoot.transform;
				//window.transform.localPosition = Vector3.zero;
				//window.transform.localRotation = Quaternion.identity;
				//window.transform.localScale = Vector3.one;
				controller = window.transform.GetComponent<BaseViewController>();
				if ( controller )
				{
					this.registerWindow(windowName,window,controller);
					controller.initController();
					controller.onPopUp(args);
				}
			}
		}
	}
}